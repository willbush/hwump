* TODO Hunt the Wumpus TODOs [17/19]

- [X] figure out input architecture [1/1]

   I need to figure out how to get inputs to flow from IO into pure functions
   while keeping the game testable. In other words, I want to be able to mock
   out the randomness of the game and pass in a list of inputs that the player
   will make, and all of this should be in a pure context.

  - [X] Make a game loop in main that increments player room number if the
    user entered 'u' and decrements of 'd'. I want to do this just to get a
    feel for how this will work.

  CLOSE NOTE: I can't think of a way to pass a stream of input into a pure
  context. I think I basically need to perform discrete operations on the
  game, and I can have some helper function for tests that can take a list of
  operations and run them on the game.


- [X] create game map

   After looking into 2D arrays, I realized I could just make it a vector of an
   unboxed product type. Not that it matters if it is unboxed or not since this
   doesn't need to be fast. However, it can be good practice to think about
   memory usage since heap allocation is not any where near as obvious as it is
   in Rust.

- [X] implement player movement through the map

- [X] add basic code to use move through the map from the console

- [X] handle invalid input in the main game loop

- [X] fully add player movement

- [X] print adjacent the tunnel leads to

- [X] randomly initialize player position

- [X] add randomly initialized static hazards

- [X] implement player death by falling into pit

- [X] add super bats and implement super bat snatch

- [X] add and implement Wumpus

- [X] fix random usage with [[https://hackage.haskell.org/package/MonadRandom-0.1.3/docs/Control-Monad-Random.html][monad random]]

- [X] add game over state for running out of arrows
  
- [X] implement crude player shooting

- [X] return traversed rooms when shooting
  
- [X] complete player shooting

- [ ] Hook up shooting to Main

- [ ] print warnings for entities in adjacent rooms

